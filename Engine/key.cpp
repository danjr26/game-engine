#include "key.h"

Key windowsScanCodeToKey(uint i_scanCode) {
	uint virtualKey = MapVirtualKeyA(i_scanCode, MAPVK_VSC_TO_VK_EX);
	switch (virtualKey) {
	case 'A': return Key::a;
	case 'B': return Key::b;
	case 'C': return Key::c;
	case 'D': return Key::d;
	case 'E': return Key::e;
	case 'F': return Key::f;
	case 'G': return Key::g;
	case 'H': return Key::h;
	case 'I': return Key::i;
	case 'J': return Key::j;
	case 'K': return Key::k;
	case 'L': return Key::l;
	case 'M': return Key::m;
	case 'N': return Key::n;
	case 'O': return Key::o;
	case 'P': return Key::p;
	case 'Q': return Key::q;
	case 'R': return Key::r;
	case 'S': return Key::s;
	case 'T': return Key::t;
	case 'U': return Key::u;
	case 'V': return Key::v;
	case 'W': return Key::w;
	case 'X': return Key::x;
	case 'Y': return Key::y;
	case 'Z': return Key::z;
	case '1': return Key::_1;
	case '2': return Key::_2;
	case '3': return Key::_3;
	case '4': return Key::_4;
	case '5': return Key::_5;
	case '6': return Key::_6;
	case '7': return Key::_7;
	case '8': return Key::_8;
	case '9': return Key::_9;
	case '0': return Key::_0;
	case VK_OEM_PLUS: return Key::plus;
	case VK_OEM_MINUS: return Key::minus;
	case VK_OEM_COMMA: return Key::comma;
	case VK_OEM_PERIOD: return Key::period;
	case VK_OEM_1: return Key::colon;
	case VK_OEM_2: return Key::forward_slash;
	case VK_OEM_3: return Key::back_tick;
	case VK_OEM_4: return Key::open_bracket;
	case VK_OEM_5: return Key::back_slash;
	case VK_OEM_6: return Key::close_bracket;
	case VK_OEM_7: return Key::quote;
	case VK_ADD: return Key::keypad_plus;
	case VK_SUBTRACT: return Key::keypad_minus;
	case VK_MULTIPLY: return Key::keypad_multiply;
	case VK_DIVIDE: return Key::keypad_divide;
	case VK_DECIMAL: return Key::keypad_decimal;
	case VK_SEPARATOR: return Key::keypad_comma;
	case VK_NUMPAD1: return Key::keypad_1;
	case VK_NUMPAD2: return Key::keypad_2;
	case VK_NUMPAD3: return Key::keypad_3;
	case VK_NUMPAD4: return Key::keypad_4;
	case VK_NUMPAD5: return Key::keypad_5;
	case VK_NUMPAD6: return Key::keypad_6;
	case VK_NUMPAD7: return Key::keypad_7;
	case VK_NUMPAD8: return Key::keypad_8;
	case VK_NUMPAD9: return Key::keypad_9;
	case VK_NUMPAD0: return Key::keypad_0;
	case VK_F1: return Key::f1;
	case VK_F2: return Key::f2;
	case VK_F3: return Key::f3;
	case VK_F4: return Key::f4;
	case VK_F5: return Key::f5;
	case VK_F6: return Key::f6;
	case VK_F7: return Key::f7;
	case VK_F8: return Key::f8;
	case VK_F9: return Key::f9;
	case VK_F10: return Key::f10;
	case VK_F11: return Key::f11;
	case VK_F12: return Key::f12;
	case VK_LEFT: return Key::left_arrow;
	case VK_RIGHT: return Key::right_arrow;
	case VK_DOWN: return Key::down_arrow;
	case VK_UP: return Key::up_arrow;
	case VK_SPACE: return Key::space;
	case VK_BACK: return Key::backspace;
	case VK_DELETE: return Key::_delete;
	case VK_ESCAPE: return Key::escape;
	case VK_RETURN: return Key::enter;
	case VK_TAB: return Key::tab;
	case VK_LSHIFT: return Key::left_shift;
	case VK_RSHIFT : return Key::right_shift;
	case VK_LCONTROL: return Key::left_ctrl;
	case VK_RCONTROL: return Key::right_ctrl;
	case VK_LMENU: return Key::left_alt;
	case VK_RMENU: return Key::right_alt;
	case VK_LWIN: return Key::left_windows;
	case VK_RWIN: return Key::right_windows;
	case VK_SCROLL: return Key::scroll_lock;
	case VK_CAPITAL: return Key::caps_lock;
	case VK_NUMLOCK: return Key::num_lock;
	case VK_HOME: return Key::home;
	case VK_PRIOR: return Key::page_up;
	case VK_NEXT: return Key::page_down;
	case VK_END: return Key::end;
	case VK_VOLUME_UP: return Key::volume_up;
	case VK_VOLUME_DOWN: return Key::volume_down;
	case VK_VOLUME_MUTE: return Key::volume_mute;
	case VK_APPS: return Key::context_menu;
	case VK_SLEEP: return Key::sleep;
	case VK_PRINT: return Key::screenshot;
	default: return Key::unrecognized;
	}
}
