#ifndef VECTORS_H
#define VECTORS_H

#include "misc.h"

template<class T> class Vector2;
template<class T> class Vector3;
template<class T> class Vector4;

template<class T>
class Vector2 {
public:
	union {
		T x;
		T b;
	};

	union {
		T y;
		T a;
	};

	
	Vector2() :
		x(0),
		y(0)
	{}

	
	Vector2(T x, T y) :
		x(x),
		y(y)
	{}

	
	template<class T2>
	Vector2(Vector2<T2> v) :
		x((T)v.x),
		y((T)v.y)
	{}

	
	template<class T2>
	Vector2(Vector3<T2> v) :
		x((T)v.x),
		y((T)v.y)
	{}

	
	Vector2<T> operator-() const {
		return Vector2<T>(-x, -y);
	}

	
	template<class T2>
	bool operator==(Vector2<T2> v) const {
		return x == (T)v.x && y == (T)v.y;
	}

	
	template<class T2>
	bool operator!=(Vector2<T2> v) const {
		return x != (T)v.x || y != (T)v.y;
	}

	
	template<class T2>
	Vector2<T> operator+(Vector2<T2> v) const {
		return Vector2<T>(x + (T)v.x, y + (T)v.y);
	}

	
	template<class T2>
	Vector2<T> operator-(Vector2<T2> v) const {
		return Vector2<T>(x - (T)v.x, y - (T)v.y);
	}

	
	template<class T2>
	Vector2<T> operator*(T2 s) const {
		return Vector2<T>(x * (T)s, y * (T)s);
	}

	
	template<class T2>
	Vector2<T> operator/(T2 s) const {
		return Vector2<T>(x / (T)s, y / (T)s);
	}

	
	template<class T2>
	void operator+=(Vector2<T2> v) {
		x += (T)v.x;
		y += (T)v.y;
	}

	
	template<class T2>
	void operator-=(Vector2<T2> v) {
		x -= (T)v.x;
		y -= (T)v.y;
	}

	
	template<class T2>
	void operator*=(T2 s) {
		x *= (T)s;
		y *= (T)s;
	}

	
	template<class T2>
	void operator/=(T2 s) {
		x /= (T)s;
		y /= (T)s;
	}

	bool Is_Zero() const {
		return x == 0.0 && y == 0.0;
	}

	
	T Theta() const {
		return (acos(x) + (y < 0) ? PI : 0.0) * RAD_TO_DEG;
	}

	
	template<class T2>
	T Theta(Vector2<T2> v) const {
		double t = acos(Normalized().Dot((T)v.Normalized())) * RAD_TO_DEG;
		return (t == t) ? t : 180.0;
	}

	
	template<class T2>
	void Rotate(T2 angle) {
		angle = angle * DEG_TO_RAD;
		double sine = sin(angle);
		double cosine = cos(angle);
		double tempx = x * cosine - y * sine;
		y = x * sine + y * cosine;
		x = tempx;
	}

	
	template<class T2>
	void Rotate(T2 angle, Vector2<T2> point) {
		*this -= point;
		Rotate(angle);
		*this += point;
	}

	
	template<class T2>
	Vector2<T>	Rotated(T2 angle) const {
		Vector2<T> v = *this;
		v.Rotate(angle);
		return v;
	}

	
	template<class T2>
	Vector2<T>	Rotated(T2 angle, Vector2<T2> point) const {
		Vector2<T> v = *this;
		v.Rotate(angle, point);
		return v;
	}

	
	T Magnitude() const {
		return sqrt(x * x + y * y);
	}

	
	void Normalize() {
		if (Is_Zero())
			return;
		T mag = Magnitude();
		x /= mag;
		y /= mag;
	}

	
	Vector2<T> Normalized() const {
		Vector2<T> v = *this;
		v.Normalize();
		return v;
	}

	
	template<class T2>
	T Dot(Vector2<T2> v) const {
		return x * (T)v.x + y * (T)v.y;
	}

	T Dot_Self() const {
		return x * x + y * y;
	}

	
	template<class T2>
	Vector2<T> Compwise(Vector2<T2> v) const {
		return Vector2<T>(x * (T)v.x, y * (T)v.y);
	}

	
	static Vector2<T> Random_Normalized() {
		return Vector2<T>(1, 0).Rotated(Rand_Double(0.0, 360.0));
	}
};

using Vector2i = Vector2<int>;
using Vector2f = Vector2<float>;
using Vector2d = Vector2<double>;

template<class T>
class Vector3 {
public:
	union {
		T x;
		T r;
	};

	union {
		T y;
		T g;
	};

	union {
		T z;
		T b;
	};

	
	Vector3() :
		x(0),
		y(0),
		z(0)
	{}

	
	Vector3(T x, T y, T z) :
		x(x),
		y(y),
		z(z)
	{}

	
	template<class T2>
	Vector3(Vector3<T2> v) :
		x((T)v.x),
		y((T)v.y),
		z((T)v.z)
	{}

	
	template<class T2>
	Vector3(Vector2<T2> v, T2 z) :
		x((T)v.x),
		y((T)v.y),
		z(z)
	{}

	
	template<class T2>
	Vector3(Vector4<T2> v) :
		x((T)v.x),
		y((T)v.y),
		z((T)v.z)
	{}

	
	Vector3<T> operator-() const {
		return Vector3<T>(-x, -y, -z);
	}

	
	template<class T2>
	bool operator==(Vector3<T2> v) const {
		return x == (T)v.x && y == (T)v.y && z == (T)v.z;
	}

	
	template<class T2>
	bool operator!=(Vector3<T2> v) const {
		return x != (T)v.x || y != (T)v.y || z != (T)v.z;
	}

	
	template<class T2>
	Vector3<T> operator+(Vector3<T2> v) const {
		return Vector3<T>(x + (T)v.x, y + (T)v.y, z + (T)v.z);
	}

	
	template<class T2>
	Vector3<T> operator-(Vector3<T2> v) const {
		return Vector3<T>(x - (T)v.x, y - (T)v.y, z - (T)v.z);
	}

	
	template<class T2>
	Vector3<T> operator*(T2 s) const {
		return Vector3<T>(x * (T)s, y * (T)s, z * (T)s);
	}

	
	template<class T2>
	Vector3<T> operator/(T2 s) const {
		return Vector3<T>(x / (T)s, y / (T)s, z / (T)s);
	}

	
	template<class T2>
	void operator+=(Vector3<T2> v) {
		x += (T)v.x;
		y += (T)v.y;
		z += (T)v.z;
	}

	
	template<class T2>
	void operator-=(Vector3<T2> v) {
		x -= (T)v.x;
		y -= (T)v.y;
		z -= (T)v.z;
	}

	
	template<class T2>
	void operator*=(T2 s) {
		x *= (T)s;
		y *= (T)s;
		z *= (T)s;
	}

	
	template<class T2>
	void operator/=(T2 s) {
		x /= (T)s;
		y /= (T)s;
		z /= (T)s;
	}

	bool Is_Zero() const {
		return x == 0.0 && y == 0.0 && z == 0.0;
	}

	
	T Theta() const {
		return acos(-z) * RAD_TO_DEG;;
	}

	
	template<class T2>
	T Theta(Vector3<T2> v) const {
		double t = acos(Normalized().Dot(v.Normalized())) * RAD_TO_DEG;
		return (t == t) ? t : 180.0;
	}

	
	template<class T2>
	void Rotate(Vector3<T2> v) {
		Rotate(v.Theta(), v.Normalized());
	}

	
	template<class T2>
	void Rotate(T2 angle, Vector3<T2> axis) {
		double theta = angle * DEG_TO_RAD;
		Vector3d cross = axis.Cross(*this);
		double c = cos(theta);
		double s = sin(theta);
		double dot = axis.Dot(*this);
		*this = *this * c + cross * s + axis * dot * (1.0 - c);
	}

	
	template<class T2>
	void Rotate(Vector3<T2> v, Vector3<T2> point) {
		Rotate((T)v.Theta(), (T)v.Normalized(), point);
	}

	
	template<class T2>
	void Rotate(T2 angle, Vector3<T2> axis, Vector3<T2> point) {
		*this -= point;
		Rotate(angle);
		*this += point;
	}

	
	template<class T2>
	Vector3<T> Rotated(Vector3<T2> v) const {
		return Rotated((T)v.Theta(), (T)v.Normalized());
	}

	
	template<class T2>
	Vector3<T>	Rotated(T2 angle, Vector3<T2> axis) const {
		Vector3<T> v = *this;
		(T)v.Rotate(angle);
		return v;
	}

	
	template<class T2>
	Vector3<T> Rotated(Vector3<T2> v, Vector3<T2> point) const {
		return Rotated((T)v.Theta(), (T)v.Normalized(), point);
	}

	
	template<class T2>
	Vector3<T>	Rotated(T2 angle, Vector3<T2> axis, Vector3<T2> point) const {
		Vector3<T> v = *this;
		(T)v.Rotate(angle, point);
		return v;
	}

	
	T Magnitude() const {
		return sqrt(x * x + y * y + z * z);
	}

	
	void Normalize() {
		if (Is_Zero())
			return;
		T mag = Magnitude();
		x /= mag;
		y /= mag;
		z /= mag;
	}

	
	Vector3<T> Normalized() const {
		Vector3<T> v = *this;
		v.Normalize();
		return v;
	}

	
	template<class T2>
	T Dot(Vector3<T2> v) const {
		return x * (T)v.x + y * (T)v.y + z * (T)v.z;
	}

	T Dot_Self() const {
		return x * x + y * y + z * z;
	}
	
	template<class T2>
	Vector3<T> Cross(Vector3<T2> v) const {
		return Vector3<T>(y * (T)v.z - z * (T)v.y, z * (T)v.x - x * (T)v.z, x * (T)v.y - y * (T)v.x);
	}

	
	static Vector3<T> Random_Normalized() {
		double a = Rand_Double(-1.0, 1.0);
		double b = Rand_Double(0.0, 2.0 * PI);
		double c = sqrt(1 - a * a);
		return Vector3<T>(c * cos(b), c * sin(b), a);
	}

	
	template<class T2>
	Vector3<T> Compwise(Vector3<T2> v) const {
		return Vector3<T>(x * (T)v.x, y * (T)v.y, z * (T)v.z);
	}

	template<class T2>
	Vector3<T> Project(Vector3<T2> v) const {
		return v * (*this).Dot(v) / v.Dot_Self();
	}

	template<class T2>
	Vector3<T> Lazy_Project(Vector3<T2> v) const {
		return v * (*this).Dot(v);
	}

	template<class T2>
	T Project_Coeff(Vector3<T2> v) const {
		return (*this).Dot(v) / v.Dot_Self();
	}

	template<class T2>
	T Lazy_Project_Coeff(Vector3<T2> v) const {
		return (*this).Dot(v);
	}
};


using Vector3f = Vector3<float>;
using Vector3d = Vector3<double>;

using Color3c = Vector3<uchar>;
using Color3f = Vector3<float>;

template<class T>
class Vector4 {
public:
	union {
		T x;
		T r;
	};

	union {
		T y;
		T g;
	};

	union {
		T z;
		T b;
	};

	union {
		T w;
		T a;
	};

	
	Vector4() :
		x(0),
		y(0),
		z(0),
		w(0)
	{}

	
	Vector4(T x, T y, T z, T w) :
		x(x),
		y(y),
		z(z),
		w(w)
	{}

	
	template<class T2>
	Vector4(Vector4<T2> v) :
		x((T)v.x),
		y((T)v.y),
		z((T)v.z),
		w((T)v.w)
	{}

	
	template<class T2>
	Vector4(Vector3<T2> v, T2 w) :
		x((T)v.x),
		y((T)v.y),
		z((T)v.y),
		w(w)
	{}

	
	template<class T2>
	bool operator==(Vector4<T2> v) const {
		return x == (T)v.x && y == (T)v.y && z == (T)v.z && w == (T)v.w;
	}

	
	template<class T2>
	bool operator!=(Vector4<T2> v) const {
		return x != (T)v.x || y != (T)v.y || z != (T)v.z || w != (T)v.w;
	}

	
	template<class T2>
	Vector4<T> operator+(Vector4<T2> v) const {
		return Vector4<T>(x + (T)v.x, y + (T)v.y, z + (T)v.z, w + (T)v.w);
	}

	
	template<class T2>
	Vector4<T> operator-(Vector4<T2> v) const {
		return Vector4<T>(x - (T)v.x, y - (T)v.y, z - (T)v.z, w - (T)v.w);
	}

	
	template<class T2>
	Vector4<T> operator*(T2 s) const {
		return Vector4<T>(x * (T)s, y * (T)s, z * (T)s, w * (T)s);
	}

	
	template<class T2>
	Vector4<T> operator/(T2 s) const {
		return Vector4<T>(x / (T)s, y / (T)s, z / (T)s, w / (T)s);
	}

	
	template<class T2>
	void operator+=(Vector4<T2> v) {
		x += (T)v.x;
		y += (T)v.y;
		z += (T)v.z;
		w += (T)v.w;
	}

	
	template<class T2>
	void operator-=(Vector4<T2> v) {
		x -= (T)v.x;
		y -= (T)v.y;
		z -= (T)v.z;
		w -= (T)v.w;
	}

	
	template<class T2>
	void operator*=(T2 s) {
		x *= (T)s;
		y *= (T)s;
		z *= (T)s;
		w *= (T)s;
	}

	
	template<class T2>
	void operator/=(T2 s) {
		x /= (T)s;
		y /= (T)s;
		z /= (T)s;
		w /= (T)s;
	}

	
	Vector4<T> operator-() const {
		return Vector4<T>(-x, -y, -z, -w);
	}

	
	bool Is_Zero() const {
		return x == 0 && y == 0 && z == 0 && w == 0;
	}

	
	T Magnitude() const {
		return sqrt(x * x + y * y + z * z + w * w);
	}

	
	void Normalize() {
		if (Is_Zero())
			return;
		T mag = Magnitude();
		x /= mag;
		y /= mag;
		z /= mag;
	}

	
	Vector4<T> Normalized() const {
		Vector4<T> v = *this;
		(T)v.Normalize();
		return v;
	}

	
	template<class T2>
	T Dot(Vector4<T2> v) const {
		return x * (T)v.x + y * (T)v.y + z * (T)v.z + w * (T)v.w;
	}

	T Dot_Self() const {
		return x * x + y * y + z * z + w * W;
	}

	
	template<class T2>
	Vector4<T> Compwise(Vector4<T2> v) const {
		return Vector4<T>(x * (T)v.x, y * (T)v.y, z * (T)v.z, w * (T)v.w);
	}

};

using Vector4f = Vector4<float>;
using Vector4d = Vector4<double>;

using Color4c = Vector4<uchar>;
using Color4f = Vector4<float>;

#endif

